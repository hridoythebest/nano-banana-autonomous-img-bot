from dotenv import load_dotenv
load_dotenv()


import os
from google import genai
from PIL import Image
from io import BytesIO
import argparse
from pathlib import Path
from datetime import datetime

# Load API key from environment variable
API_KEY = os.environ.get("GEMINI_API_KEY")
if not API_KEY:
    raise ValueError("GEMINI_API_KEY environment variable is not set. Please set it in your .env file.")

# Configure the client with your API key
client = genai.Client(api_key=API_KEY)

DEFAULT_PROMPT = (
    "Create a high-quality, commercial advertisement-ready creative by combining the provided model/person image "
    "with the provided product image. Place the product naturally in the modelâ€™s hand as if they are holding it, "
    "ensuring proper perspective, lighting, and shadows for realism. Dynamically generate the background scene, "
    "props, and location to match both the model and the product, reflecting a professional advertising style. "
    "Maintain a clean, visually appealing composition with a focus on the product, while keeping the overall "
    "aesthetic modern, premium, and brand-appropriate."
)


def is_image_file(path: Path) -> bool:
    return path.suffix.lower() in {".jpg", ".jpeg", ".png", ".webp", ".bmp"}


def discover_images(directory: Path) -> list[Path]:
    if not directory.exists() or not directory.is_dir():
        return []
    return [p for p in sorted(directory.iterdir()) if p.is_file() and is_image_file(p)]


def safe_stem(name: str) -> str:
    return "".join(c if c.isalnum() or c in ("-", "_") else "_" for c in name)


def generate_ad(person_img: Path, product_img: Path, prompt: str, outdir: Path, model_name: str) -> Path | None:
    print(f"\n[Start] Compositing person='{person_img.name}' with product='{product_img.name}'")
    try:
        person = Image.open(person_img)
        product = Image.open(product_img)
    except Exception as e:
        print(f"[Skip] Failed to open images: {e}")
        return None

    try:
        response = client.models.generate_content(
            model=model_name,
            contents=[
                prompt,
                person,
                product,
            ],
        )
    except Exception as e:
        print(f"[Error] API call failed: {e}")
        return None

    try:
        image_parts = [
            part.inline_data.data
            for part in response.candidates[0].content.parts
            if getattr(part, "inline_data", None)
        ]
    except Exception as e:
        print(f"[Error] Unexpected response structure: {e}")
        return None

    if not image_parts:
        print("[Info] No image generated by the model.")
        return None

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    outname = f"ad_{safe_stem(person_img.stem)}__{safe_stem(product_img.stem)}__{timestamp}.jpg"
    outpath = outdir / outname
    try:
        edited_image = Image.open(BytesIO(image_parts[0]))
        edited_image.save(outpath)
        print(f"[Done] Saved: {outpath}")
        return outpath
    except Exception as e:
        print(f"[Error] Failed to save output: {e}")
        return None


def main():
    parser = argparse.ArgumentParser(description="Compose professional ad images by combining a person and product image using Gemini.")
    parser.add_argument("--person", type=str, help="Path to a specific person image. If omitted, will use all images in person_images/ directory.")
    parser.add_argument("--product", type=str, help="Path to a specific product image. If omitted, will use all images in product_images/ directory.")
    parser.add_argument("--person_dir", type=str, default=str(Path(__file__).resolve().parents[1] / "person_images"), help="Directory containing person images.")
    parser.add_argument("--product_dir", type=str, default=str(Path(__file__).resolve().parents[1] / "product_images"), help="Directory containing product images.")
    parser.add_argument("--outdir", type=str, default=str(Path(__file__).resolve().parents[1] / "outputs"), help="Directory to save generated images.")
    parser.add_argument("--prompt", type=str, default=DEFAULT_PROMPT, help="Custom prompt to guide the composition.")
    parser.add_argument("--model", type=str, default="gemini-2.5-flash-image-preview", help="Model name to use.")

    args = parser.parse_args()

    outdir = Path(args.outdir)
    outdir.mkdir(parents=True, exist_ok=True)

    pairs: list[tuple[Path, Path]] = []

    if args.person and args.product:
        person_path = Path(args.person)
        product_path = Path(args.product)
        if not person_path.exists():
            raise FileNotFoundError(f"Person image not found: {person_path}")
        if not product_path.exists():
            raise FileNotFoundError(f"Product image not found: {product_path}")
        pairs.append((person_path, product_path))
    else:
        person_dir = Path(args.person_dir)
        product_dir = Path(args.product_dir)
        person_images = discover_images(person_dir)
        product_images = discover_images(product_dir)
        if not person_images:
            raise FileNotFoundError(f"No person images found in {person_dir}")
        if not product_images:
            raise FileNotFoundError(f"No product images found in {product_dir}")

        # Cartesian product: all persons x all products
        for p in person_images:
            for q in product_images:
                pairs.append((p, q))

    print(f"Total compositions to generate: {len(pairs)}")
    success = 0
    for pi, qi in pairs:
        if generate_ad(pi, qi, args.prompt, outdir, args.model):
            success += 1

    print(f"\nCompleted. Successful generations: {success}/{len(pairs)}")


if __name__ == "__main__":
    main()
